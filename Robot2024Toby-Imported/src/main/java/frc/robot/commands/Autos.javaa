package frc.robot.commands;

import java.util.List;

import com.pathplanner.lib.path.PathPlannerTrajectory;

import edu.wpi.first.math.controller.ProfiledPIDController;
import edu.wpi.first.math.proto.Trajectory;
import edu.wpi.first.math.trajectory.TrajectoryConfig;
import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj2.command.SwerveControllerCommand;
import frc.robot.subsystems.AmpScorer;
import frc.robot.subsystems.Intake;
import frc.robot.subsystems.Limelight;
import frc.robot.subsystems.Shooter;
import frc.robot.subsystems.SwerveDrive;

public class Autos extends CommandBase {
    TrajectoryConfig config;
    Trajectory trajectory;
    ProfiledPIDController thetaController;
    SwerveControllerCommand swerveControllerCommand;
    SwerveDrive m_robotDrive;
    Limelight limelight;
    Shooter shooter;
    AmpScorer ampScorer;
    Intake intake;
    List<PathPlannerTrajectory> pathGroup;

    public Autos(SwerveDrive m_robotDrive, Limelight limelight, Shooter shooter, AmpScorer ampScorer, Intake intake, List<PathPlannerTrajectory> pathGroup) {
        this.m_robotDrive = m_robotDrive;
        this.limelight = limelight;
        this.shooter = shooter;
        this.ampScorer = ampScorer;
        this.intake = intake;
        this.pathGroup = pathGroup;
    }

    //Limelight giving correct values
    public Command toPosition(Pose2d position, boolean limelight) {
        DriverStation.Alliance color;
        color = DriverStation.getAlliance();
        PathPlannerTrajectory pathToPosition;
        if(color == DriverStation.Alliance.Blue){
          pathToPosition = PathPlanner.generatePath(
            new PathConstraints(2.5, 2.5),
            new PathPoint(new Translation2d(m_robotDrive.getPose().getX(), m_robotDrive.getPose().getY()), Rotation2d.fromDegrees(180)),
            new PathPoint(new Translation2d(position.getX(), position.getY()), Rotation2d.fromDegrees(180))
          );
          System.out.println("starting:"+m_robotDrive.getPose().toString());
          System.out.println("ending:"+position.toString());
    
        } else {
          double startY = m_robotDrive.getPose().getY();
          if(limelight){
            startY = Constants.Autonomous.FIELD_HEIGHT - startY;
          }
          m_robotDrive.resetOdometry(new Pose2d(m_robotDrive.getPose().getX(), startY, m_robotDrive.getPose().getRotation()));
          double difference = position.getY() - m_robotDrive.getPose().getY();
    
          pathToPosition = PathPlanner.generatePath(
            new PathConstraints(2.5, 2.5),
            new PathPoint(new Translation2d(m_robotDrive.getPose().getX(), startY), Rotation2d.fromDegrees(180)),
            new PathPoint(new Translation2d(position.getX(), m_robotDrive.getPose().getY() - difference), Rotation2d.fromDegrees(180))
          );
          System.out.println("starting:"+m_robotDrive.getPose().toString());
          System.out.println("ending:"+position.toString());
    
        }
    
        PIDController PIDX = new PIDController(2, 0.0, 0.0);
        PIDController PIDY = new PIDController(3, 0.0, 0.0);
        PIDController PIDRotation = new PIDController(0, 0.0, 0.0);
        PIDRotation.enableContinuousInput(-Math.PI, Math.PI);
    
        return new PPSwerveControllerCommand(
            pathToPosition,
            m_robotDrive::getPose,
            Constants.DriveConstants.kDriveKinematics,
            PIDX, // PID constants to correct for translation error (used to create the X and Y
            PIDY,  // PID controllers)
            PIDRotation,
            m_robotDrive::setModuleStates,
            true,
            m_robotDrive
          );
    }
    
    public HashMap<String,Command> getEventMap(){
        HashMap<String, Command> eventMap = new HashMap<>();
        
        /*eventMap.put("releaseObj", new SequentialCommandGroup(
            new InstantCommand(() -> claw.releaseObjectAuto()),
            new WaitCommand(1),
            new InstantCommand(() -> claw.stop())));*/
            
        eventMap.put("wait", new WaitCommand(0.2));
      
        /*eventMap.put("bringArmHome", new InstantCommand(() -> {
          arm.setElbowBase();
        }).andThen(new WaitCommand(0.7)).andThen(new InstantCommand(() -> arm.setShoulderBase())));*/
    
        eventMap.put("intake", new SequentialCommandGroup(
            new InstantCommand(() -> arm.moveToFloor()),
            new WaitUntilCommand(() -> arm.reached())));
    
        eventMap.put("intakeClaw", new SequentialCommandGroup(
          new FunctionalCommand(
            () -> System.out.println("Initiating Claw Intake"),
            () -> claw.intakeObjectHard(),
            interrupted -> {
              new WaitCommand(0.1);
              claw.stop();
            },
            () -> claw.isStuck(), 
            claw)
        ));
    
        eventMap.put("armHome", new InstantCommand(() -> {
          arm.setElbowBase();
          arm.setShoulderBase();
        }));
    
        /*eventMap.put("extendArm", new InstantCommand(() -> arm.highPlatformCube()));*/
        return eventMap;
        
    }
}

